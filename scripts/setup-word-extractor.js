#!/usr/bin/env node

/**
 * Setup do Extrator de Imagens de Word
 * 
 * Instala as depend√™ncias necess√°rias e configura o ambiente
 * para extra√ß√£o autom√°tica de imagens de documentos Word.
 */

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

class WordExtractorSetup {
    constructor() {
        this.dependencies = [
            'adm-zip@^0.5.10',
            'sharp@^0.32.6'
        ];
    }

    async setup() {
        console.log('üöÄ Configurando Extrator de Imagens de Word\n');
        
        try {
            await this.checkNodeVersion();
            await this.installDependencies();
            await this.verifyInstallation();
            await this.createExampleFiles();
            
            console.log('\n‚úÖ Setup conclu√≠do com sucesso!');
            console.log('\nüìù Como usar:');
            console.log('  npm run extract-word-images manual.docx nome-do-manual');
            console.log('  ou');
            console.log('  node scripts/extract-word-images.js manual.docx nome-do-manual');
            
        } catch (error) {
            console.error('\n‚ùå Erro no setup:', error.message);
            process.exit(1);
        }
    }

    async checkNodeVersion() {
        console.log('üîç Verificando vers√£o do Node.js...');
        
        const nodeVersion = process.version;
        const majorVersion = parseInt(nodeVersion.split('.')[0].substring(1));
        
        console.log(`   Node.js: ${nodeVersion}`);
        
        if (majorVersion < 14) {
            throw new Error('Node.js 14 ou superior √© necess√°rio');
        }
        
        console.log('   ‚úÖ Vers√£o do Node.js compat√≠vel');
    }

    async installDependencies() {
        console.log('\nüì¶ Instalando depend√™ncias...');
        
        for (const dep of this.dependencies) {
            console.log(`   Instalando ${dep}...`);
            await this.runCommand(`npm install ${dep}`);
        }
        
        console.log('   ‚úÖ Depend√™ncias instaladas');
    }

    async verifyInstallation() {
        console.log('\n‚úÖ Verificando instala√ß√£o...');
        
        try {
            // Testar adm-zip
            require('adm-zip');
            console.log('   ‚úÖ adm-zip funcionando');
            
            // Testar sharp
            const sharp = require('sharp');
            console.log('   ‚úÖ sharp funcionando');
            
            // Testar cria√ß√£o de imagem simples
            await sharp({
                create: {
                    width: 100,
                    height: 100,
                    channels: 3,
                    background: { r: 255, g: 255, b: 255 }
                }
            })
            .jpeg()
            .toBuffer();
            
            console.log('   ‚úÖ Processamento de imagem funcionando');
            
        } catch (error) {
            throw new Error(`Erro na verifica√ß√£o: ${error.message}`);
        }
    }

    async createExampleFiles() {
        console.log('\nüìÑ Criando arquivos de exemplo...');
        
        // Criar diret√≥rio de exemplos se n√£o existir
        const examplesDir = 'examples/word-extraction';
        if (!fs.existsSync(examplesDir)) {
            fs.mkdirSync(examplesDir, { recursive: true });
            console.log('   üìÅ Diret√≥rio de exemplos criado');
        }

        // README de exemplo
        const readmeContent = `# Extra√ß√£o de Imagens de Word - Exemplos

## Como usar

1. **Preparar o documento Word:**
   - Salvar como .docx (n√£o .doc)
   - Imagens devem estar incorporadas no documento
   - Nomes descritivos ajudam na classifica√ß√£o autom√°tica

2. **Executar extra√ß√£o:**
   \`\`\`bash
   # M√©todo 1: npm script
   npm run extract-word-images manual-sox406.docx sox406

   # M√©todo 2: node direto
   node scripts/extract-word-images.js manual-sox406.docx sox406
   \`\`\`

3. **Resultado:**
   - Imagens extra√≠das e organizadas em \`manuais/sox406/images/\`
   - Classifica√ß√£o autom√°tica por tipo
   - Otimiza√ß√£o autom√°tica de tamanho
   - Relat√≥rio detalhado gerado

## Classifica√ß√£o Autom√°tica

O sistema classifica imagens automaticamente baseado em:

### Por Nome de Arquivo
- **equipment**: equipamento, aparelho, vista, frontal, lateral, traseira
- **interface**: tela, lcd, display, menu, configura√ß√£o, painel  
- **components**: componente, pe√ßa, parte, tubo, sensor, cabo
- **operation**: passo, opera√ß√£o, procedimento, instala√ß√£o, uso
- **samples**: amostra, material, preparo, prepara√ß√£o
- **maintenance**: manuten√ß√£o, limpeza, calibra√ß√£o, troca
- **troubleshooting**: problema, erro, solu√ß√£o, alerta, aviso

### Por Dimens√µes
- Imagens grandes (>1000x600): equipment
- Imagens pequenas (<500x500): interface  
- Formato panor√¢mico: operation

### Classifica√ß√£o Manual
Se n√£o conseguir classificar automaticamente, o sistema perguntar√° ao usu√°rio.

## Estrutura Gerada

\`\`\`
manuais/sox406/images/
‚îú‚îÄ‚îÄ equipment/
‚îÇ   ‚îú‚îÄ‚îÄ sox406-main.jpg
‚îÇ   ‚îú‚îÄ‚îÄ sox406-front.jpg
‚îÇ   ‚îî‚îÄ‚îÄ sox406-side.jpg
‚îú‚îÄ‚îÄ interface/
‚îÇ   ‚îú‚îÄ‚îÄ lcd-home.jpg
‚îÇ   ‚îî‚îÄ‚îÄ lcd-settings.jpg
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îî‚îÄ‚îÄ sox406-exploded.jpg
‚îî‚îÄ‚îÄ operation/
    ‚îú‚îÄ‚îÄ step1-preparation.jpg
    ‚îî‚îÄ‚îÄ step2-samples.jpg
\`\`\`

## Otimiza√ß√µes Aplicadas

- **Redimensionamento inteligente**
- **Compress√£o JPEG otimizada**  
- **Convers√£o de formatos quando necess√°rio**
- **Remo√ß√£o de metadados desnecess√°rios**

## Pr√≥ximos Passos

1. Revisar imagens classificadas
2. Renomear se necess√°rio  
3. Executar \`node scripts/add-images-sox406.js\` para atualizar HTML
4. Testar com \`npm run dev\`
5. Build final com \`npm run build\`
`;

        fs.writeFileSync(path.join(examplesDir, 'README.md'), readmeContent);
        console.log('   üìÑ README de exemplos criado');

        // Script de exemplo
        const exampleScript = `#!/bin/bash

# Exemplo de uso do extrator de imagens

echo "üìÑ Extrator de Imagens - Exemplo de Uso"
echo ""

# Verificar se arquivo foi fornecido
if [ -z "$1" ]; then
    echo "‚ùå Uso: ./example-extraction.sh <arquivo.docx> [manual-name]"
    echo "   Exemplo: ./example-extraction.sh manual-sox406.docx sox406"
    exit 1
fi

WORD_FILE="$1"
MANUAL_NAME="\${2:-\$(basename \"\$WORD_FILE\" .docx)}"

echo "üìÅ Arquivo Word: $WORD_FILE"
echo "üéØ Manual de destino: $MANUAL_NAME"
echo ""

# Verificar se arquivo existe
if [ ! -f "$WORD_FILE" ]; then
    echo "‚ùå Arquivo n√£o encontrado: $WORD_FILE"
    exit 1
fi

# Executar extra√ß√£o
echo "üöÄ Iniciando extra√ß√£o..."
node ../scripts/extract-word-images.js "$WORD_FILE" "$MANUAL_NAME"

if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ Extra√ß√£o conclu√≠da com sucesso!"
    echo "üìÅ Verifique as imagens em: manuais/$MANUAL_NAME/images/"
    echo ""
    echo "üîÑ Pr√≥ximos passos:"
    echo "   1. Revisar classifica√ß√£o das imagens"
    echo "   2. Atualizar HTML do manual"
    echo "   3. Testar localmente"
else
    echo "‚ùå Erro na extra√ß√£o"
    exit 1
fi
`;

        fs.writeFileSync(path.join(examplesDir, 'example-extraction.sh'), exampleScript);
        fs.chmodSync(path.join(examplesDir, 'example-extraction.sh'), '755');
        console.log('   üìú Script de exemplo criado');
    }

    async runCommand(command) {
        return new Promise((resolve, reject) => {
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    reject(new Error(`Comando falhou: ${command}\n${error.message}`));
                    return;
                }
                resolve(stdout);
            });
        });
    }
}

// Executar setup se chamado diretamente
if (require.main === module) {
    const setup = new WordExtractorSetup();
    setup.setup().catch(console.error);
}

module.exports = WordExtractorSetup;