# EleveLab Manuais - Comandos de Automa√ß√£o
# Facilita desenvolvimento, build e deployment

.PHONY: help install dev build clean deploy generate optimize test

# Cores para output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## Mostra esta ajuda
	@echo "$(GREEN)EleveLab Manuais - Comandos Dispon√≠veis$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-15s$(NC) %s\n", $$1, $$2}'

install: ## Instala depend√™ncias
	@echo "$(GREEN)Instalando depend√™ncias...$(NC)"
	npm install
	@echo "$(GREEN)‚úÖ Depend√™ncias instaladas$(NC)"

dev: ## Inicia servidor de desenvolvimento
	@echo "$(GREEN)Iniciando servidor de desenvolvimento...$(NC)"
	npm run dev

build: ## Gera build para produ√ß√£o
	@echo "$(GREEN)Gerando build para produ√ß√£o...$(NC)"
	npm run build
	@echo "$(GREEN)‚úÖ Build gerado em dist/$(NC)"

clean: ## Limpa arquivos de build
	@echo "$(YELLOW)Limpando arquivos de build...$(NC)"
	rm -rf dist/
	rm -rf node_modules/.cache/
	@echo "$(GREEN)‚úÖ Arquivos limpos$(NC)"

optimize: ## Otimiza imagens
	@echo "$(GREEN)Otimizando imagens...$(NC)"
	npm run optimize-images
	@echo "$(GREEN)‚úÖ Imagens otimizadas$(NC)"

generate: ## Gera novo manual (interativo)
	@echo "$(GREEN)Gerando novo manual...$(NC)"
	npm run generate

extract-word: ## Extrai imagens de documento Word (usage: make extract-word FILE=manual.docx MANUAL=sox406)
	@echo "$(GREEN)Extraindo imagens de documento Word...$(NC)"
	@if [ -z "$(FILE)" ]; then \
		echo "$(RED)‚ùå Uso: make extract-word FILE=manual.docx MANUAL=nome-do-manual$(NC)"; \
		exit 1; \
	fi
	npm run extract-word-images $(FILE) $(MANUAL)

setup-word-extractor: ## Instala depend√™ncias para extra√ß√£o de Word
	@echo "$(GREEN)Configurando extrator de Word...$(NC)"
	node scripts/setup-word-extractor.js

preview: ## Preview do build de produ√ß√£o
	@echo "$(GREEN)Iniciando preview de produ√ß√£o...$(NC)"
	npm run preview

deploy: clean build ## Deploy para produ√ß√£o
	@echo "$(GREEN)Fazendo deploy...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Configure seu m√©todo de deploy$(NC)"
	# rsync -av dist/ user@server:/path/to/site/
	# aws s3 sync dist/ s3://your-bucket/
	# netlify deploy --dir=dist --prod
	@echo "$(GREEN)‚úÖ Deploy configurado$(NC)"

lint: ## Verifica qualidade do c√≥digo
	@echo "$(GREEN)Verificando qualidade do c√≥digo...$(NC)"
	npm run lint

test: ## Executa testes
	@echo "$(GREEN)Executando testes...$(NC)"
	npm test

stats: ## Mostra estat√≠sticas do projeto
	@echo "$(GREEN)Estat√≠sticas do projeto:$(NC)"
	@echo "üìÅ Manuais: $(shell ls manuais/ | wc -l | xargs)"
	@echo "üìÑ Assets CSS: $(shell find assets/css -name "*.css" | wc -l | xargs)"
	@echo "üìÑ Assets JS: $(shell find assets/js -name "*.js" | wc -l | xargs)"
	@echo "üñºÔ∏è  Templates: $(shell ls templates/ | wc -l | xargs)"
	@echo "üìä Scripts: $(shell ls scripts/ | wc -l | xargs)"

validate: ## Valida estrutura dos manuais
	@echo "$(GREEN)Validando estrutura dos manuais...$(NC)"
	@for manual in manuais/*/; do \
		if [ -f "$$manual/index.html" ]; then \
			echo "$(GREEN)‚úÖ $$manual$(NC)"; \
		else \
			echo "$(RED)‚ùå $$manual - index.html n√£o encontrado$(NC)"; \
		fi \
	done

backup: ## Cria backup do projeto
	@echo "$(GREEN)Criando backup...$(NC)"
	@timestamp=$$(date +%Y%m%d_%H%M%S); \
	tar -czf "elevelab-manuais_backup_$$timestamp.tar.gz" \
		--exclude='node_modules' \
		--exclude='dist' \
		--exclude='*.tar.gz' \
		.; \
	echo "$(GREEN)‚úÖ Backup criado: elevelab-manuais_backup_$$timestamp.tar.gz$(NC)"

update: ## Atualiza sistema (git pull + npm install)
	@echo "$(GREEN)Atualizando sistema...$(NC)"
	git pull origin main
	npm install
	@echo "$(GREEN)‚úÖ Sistema atualizado$(NC)"

check: ## Verifica sa√∫de do projeto
	@echo "$(GREEN)Verificando sa√∫de do projeto...$(NC)"
	@echo "üì¶ Node.js: $$(node --version 2>/dev/null || echo 'n√£o instalado')"
	@echo "üì¶ NPM: $$(npm --version 2>/dev/null || echo 'n√£o instalado')"
	@echo "üåê Servidor HTTP: $$(which http-server >/dev/null && echo 'dispon√≠vel' || echo 'instale com: npm install -g http-server')"
	@echo ""
	@$(MAKE) validate

docs: ## Gera documenta√ß√£o do projeto
	@echo "$(GREEN)Documenta√ß√£o dispon√≠vel em:$(NC)"
	@echo "üìñ README.md - Documenta√ß√£o principal"
	@echo "üìã package.json - Configura√ß√£o do projeto"
	@echo "üîß Makefile - Este arquivo de comandos"
	@echo "üìÅ templates/ - Templates para novos manuais"
	@echo "üìÅ scripts/ - Scripts de automa√ß√£o"

# Comandos de desenvolvimento r√°pido

new-manual: ## Cria novo manual rapidamente
	@echo "$(GREEN)Criando novo manual...$(NC)"
	@read -p "Nome do equipamento (ex: digestor-microondas): " name; \
	read -p "T√≠tulo completo: " title; \
	node scripts/generate-manual.js --name "$$name" --title "$$title"

update-catalog: ## Atualiza cat√°logo principal
	@echo "$(YELLOW)Atualizando refer√™ncias no cat√°logo...$(NC)"
	@echo "$(GREEN)‚úÖ Execute 'make build' para aplicar mudan√ßas$(NC)"

serve-local: ## Servidor local simples (sem npm)
	@echo "$(GREEN)Iniciando servidor local simples...$(NC)"
	@if command -v python3 >/dev/null; then \
		python3 -m http.server 8000; \
	elif command -v python >/dev/null; then \
		python -m SimpleHTTPServer 8000; \
	else \
		echo "$(RED)Python n√£o encontrado. Use 'make dev' em vez disso.$(NC)"; \
	fi

# Comandos de manuten√ß√£o

fix-permissions: ## Corrige permiss√µes dos arquivos
	@echo "$(GREEN)Corrigindo permiss√µes...$(NC)"
	chmod +x scripts/*.js
	find . -name "*.html" -exec chmod 644 {} \;
	find . -name "*.css" -exec chmod 644 {} \;
	find . -name "*.js" -exec chmod 644 {} \;
	@echo "$(GREEN)‚úÖ Permiss√µes corrigidas$(NC)"

security-check: ## Verifica seguran√ßa b√°sica
	@echo "$(GREEN)Verificando seguran√ßa...$(NC)"
	@echo "üîç Procurando por chaves ou senhas expostas..."
	@! grep -r -i "password\|secret\|key\|token" --include="*.html" --include="*.js" --include="*.css" . || echo "$(RED)‚ö†Ô∏è  Poss√≠veis credenciais encontradas$(NC)"
	@echo "$(GREEN)‚úÖ Verifica√ß√£o de seguran√ßa conclu√≠da$(NC)"

# Comandos de produ√ß√£o

production-check: ## Verifica se est√° pronto para produ√ß√£o
	@echo "$(GREEN)Verificando prepara√ß√£o para produ√ß√£o...$(NC)"
	@$(MAKE) validate
	@$(MAKE) security-check
	@$(MAKE) build
	@echo "$(GREEN)‚úÖ Pronto para produ√ß√£o$(NC)"

# Comandos especiais

demo: build ## Prepara demo completo
	@echo "$(GREEN)Preparando demo...$(NC)"
	@$(MAKE) optimize
	@$(MAKE) preview
	@echo "$(GREEN)‚úÖ Demo iniciado em http://localhost:3001$(NC)"

all: clean install build ## Faz tudo: limpa, instala e builda
	@echo "$(GREEN)‚úÖ Processo completo finalizado!$(NC)"

# Comando padr√£o
.DEFAULT_GOAL := help